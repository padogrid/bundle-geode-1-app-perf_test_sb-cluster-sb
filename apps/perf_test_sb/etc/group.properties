# -------------------------------------------------------------------------
# Overview:
#
# Group test cases allow you to create and test groups of Geode operations.
# You can think of a group as a function invoking one or more Geode operations.
# As an example, a group could contain set, get, put, get calls making a total
# of four (4) Geode Region (Map) calls. You can designate threads to invoke this
# group and measure the average latency of each group (function) call.
# -------------------------------------------------------------------------

# The number of test runs. Each group has the member size set by the 
# 'memberSetSize' property. This means the total number of valid 
# legitimate transactions that return summary would be limited to
# the number of groups. Use this property to increase the number of
# transactions.
# Default: 1
testCount=1

# Interval between test runs in msec.
# Default: 0
testIntervalInMsec=0

# Print status interval in sec. The application prints status in this interval
# to the console.
# Default: 10 sec
printStatusIntervalInSec=10

# Group names separated by ',' or '&'. If ',', then the next group executes after
# the current group completes. If '&', then the current group and the next group
# execute concurrently. Note that testCount applies per group. For example, if
# testCount=2 and groupName=g1&g2,g3 then g1 and g2 execute concurrently twice
# before g3 executes twice.
groupNames=g1

# -------------------------------------------------------------------------
# Group:
#
# A group represents a function that invokes one or more Geode Region (Map) methods.
#
# name         Group name.
#
# threadCount  The number of threads per group test.
#
#              Default: (processor count * 1.5).
#
# operations  Comma separated list of operations to perform. Operations are
#             individually defined. See the "Operations" section for details.
#             The listed operations are invoked sequentially per group invocation.
#             For example, if totalInvocationCount=1000 then the operations listed
#             will be invoked 1000 times in the order they are listed.
#
# totalInvocationCount Total number of group invocations.
# 
# comment     Any text describing the group. 
# -------------------------------------------------------------------------

# g1 puts 10000 1 KiB objects into all the sb test regions
g1.name=PutAll
g1.threadCount=1
g1.operations=partition,partition_overflow,partition_persistent,partition_persistent_overflow,replicate,replicate_overflow,replicate_persistent,replicate_persistent_overflow 
g1.comment=Region.putAll() (1 KiB payload in all sb regions)
g1.totalInvocationCount=1

# -------------------------------------------------------------------------
# Operations:
#
# map | region | sleep
#                 Data structure name. This parameter specifies the name of the
#                 data structure pertaining to the specified test case. If unspecified
#                 then it defaults to 'map'. Note that 'map' and 'region' are same.
#                 Specifying either one will use the GemFire Region data structure.
#
#                 The 'sleep' operation sleeps for the specified amount of time
#                 in milliseconds. It has no other attributes. For example, 
#                 'sleep10.sleep=10', sleeps for 10 milliseconds before executing
#                 the next operation in the group.
#
# ref             The test case reference name. The defining test case inherits
#                 all non-factory values set by the referenced test case. The
#                 properties that begin with 'factory.' are not inherited.
#                 Referenced properties are overwritten if defined.
#
# testCase        Test case.
#                 If invalid values are entered then the default value is assigned.
#
#                 Valid Test Cases:
#                   - region: get, getall, put, putall  - Default: putall
#
# payloadSize     The value object size in bytes. The value object is a blob
#                 object containing the specified payload size in the form of
#                 byte array. Note that the key objects are String objects with
#                 the prefix defined by the key.prefix property. This property is
#                 used by the following test cases only.
#
#                 Used By: put, putall
#                 Default: 1024
#
# batchSize       The number of objects per putAll() or getAll() call per thread.
#
#                 Used By: putall, getall
#                 Default: 100
#
# totalEntryCount The total number of entries. 
#
#                 - For putall and getall, this value dictates the upper bound
#                   of the entry count. The number of objects inserted will be less
#                   than or equal to this value. To keep the upper bound, the keys are generated
#                   in a round-robin fashion to perform updates instead of inserts if the entry
#                   count reaches the upper limit. To insert the exact number of entries
#                   defined by totalEntryCount, the following must hold true:
#
#                      totalEntryCount = totalInvocationCount * batchSize
#
#                 - For get, totalEntryCount defines the range in selecting
#                   keys randomly. This value is always greater than or equal
#                   to key number.
#
#                       totalEntryCount >= key-number
#
#                 Used By: get, getall, putall
#                 Default: 10000
#
# key.prefix      Key names begin with this value.
#
#                 Used By: get, getall, put, putall
#                 Default: k
#
# key.startNum    Key start number. Each key name stars with the prefix defined by
#                 the key.prefix property followed by a number that is increased
#                 incrementally starting from this value. For example, 
#                 key.prefix=a and key.startNum=10 produces the first key name, "a10".
#
#                 Used By: get, getall, put, putall
#                 Default: 1
# -------------------------------------------------------------------------

# partition
partition.map=partition
partition.testCase=putall
partition.totalEntryCount=10000
partition.payloadSize=1024
partition.batchSize=10000
partition.key.prefix=a
partition.key.startNum=1

# partition_overflow
partition_overflow.ref=partition
partition_overflow.map=partition_overflow

# partition_persistent
partition_persistent.ref=partition
partition_persistent.map=partition_persistent

# partition_persistent_overflow
partition_persistent_overflow.ref=partition
partition_persistent_overflow.map=partition_persistent_overflow

# replicate
replicate.ref=partition
replicate.map=replicate

# replicate_overflow 
replicate_overflow.ref=partition
replicate_overflow.map=replicate_overflow

# replicate_persistent 
replicate_persistent.ref=partition
replicate_persistent.map=replicate_persistent

# replicate_persistent_overflow 
replicate_persistent_overflow.ref=partition
replicate_persistent_overflow.map=replicate_persistent_overflow
