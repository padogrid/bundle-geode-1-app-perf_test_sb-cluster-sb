#!/usr/bin/env bash

SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

BASE_DIR="$(dirname "$SCRIPT_DIR")"

EXECUTABLE="`basename $0`"

if [ "$HELP" == "true" ]; then
cat <<EOF

WORKSPACE
   $PADOGRID_WORKSPACE

NAME
   $EXECUTABLE - Determine the network partition type

SYNOPSIS
   ./$EXECUTABLE [-?]

DESRIPTION
   Determines the network partition type.

DEFAULT:
   ./$EXECUTABLE

EOF
exit
fi

TIMESTAMP=`date +%y%m%d-%H%M%S`
TMP_FILE1="/tmp/padogrid-1-$EXECUTABLE-$TIMESTAMP.log"
if [ -f $TMP_FILE1 ]; then
   rm $TMP_FILE1
fi
TMP_FILE2="/tmp/padogrid-2-$EXECUTABLE-$TIMESTAMP.log"
if [ -f $TMP_FILE2 ]; then
   rm $TMP_FILE2
fi

line_count=$(./show_cluster_views | sed '/crashed/h;//!H;$!d;x' | wc -l)
let line_count=line_count-3
crashed_count=$(./show_cluster_views | sed '/crashed/h;//!H;$!d;x' | grep 'crashed:' | sed 's/.*crashed:.* //')

type="normal"

# Type 0
if [ "$crashed_count" == "$line_count" ]; then
   if [ $crashed_count -eq 1 ]; then
      type="0"
      echo ""
      echo -e "       type: ${CError}$type${CNone}"
      echo ""
      exit
   fi
fi


# Type 1 - 5
last_restarted_timestamp=""
./show_membership_service_failure -no-color > $TMP_FILE1
if [ "$(cat $TMP_FILE1 | grep 'system restarted')" != "" ]; then
   last_restarted_timestamp=$(./show_membership_service_failure | grep -B 1 'system restarted' | grep "$TTee" | sed -e "s/$TTee //" | sort | tail -n 1)
fi
is_membership_failure="false"
if [ "$(cat $TMP_FILE1 | grep 'Membership service failure')" != "" ]; then
   is_membership_failure="true"
fi
rm $TMP_FILE1

#
# Get cluster views
#

# Determine a list of log files
./show_cluster_views -no-color > $TMP_FILE1
log_files="$(cat $TMP_FILE1 | grep .log: | sed 's/:.*$//' | uniq)"

# Find all locators logged
cat $TMP_FILE1 | grep "  .*locator" | sed -e 's/^.* //' -e 's/(.*$//' -e 's/ .*$//' > $TMP_FILE2
all_locators=""
while IFS= read -r line; do
   if [[ "$all_locators" != *"$line"* ]]; then
      if [ "$all_locators" == "" ];then
         all_locators=$line
      else
         all_locators="$all_locators $line"
      fi
   fi
done < "$TMP_FILE2"
unset IFS
rm $TMP_FILE2

echo ""
if [ "$is_membership_failure" == "true" ] && [ "$last_restarted_timestamp" == "" ]; then
   for locator in $all_locators; do
     locator_endpoint=$locator[10334]
     echo "Connecting to locator via gfsh $locator_endpoint..."
     gfsh -e "connect --locator=$locator_endpoint" > $TMP_FILE2
     if [ "$(cat $TMP_FILE2 | grep -i success)" != "" ]; then
        echo "  diagnosis: $locator_endpoint connection successful"
        if [ "$successful_locators" == "" ]; then
           successful_locators="$locator_endpoint"
        else
           successful_locators="$successful_locators $locator_endpoint"
        fi
     else
        if [ "$failed_locators" == "" ]; then
           failed_locators="$locator_endpoint"
        else
           failed_locators="$failed_locators $locator_endpoint"
        fi
        echo "  diagnosis: $locator_endpoint connection failed"
     fi
     echo ""
     rm $TMP_FILE2
   done
   rm $TMP_FILE1

   type="inconclusive"
   if [ "$successful_locators" == "" ]; then
      diffs=$(./show_quorum_check | grep diff: | sed 's/^.*diff: //' | uniq)
      members=$(./show_quorum_check | grep weight: | sed 's/^.*members: //' | uniq)
      weights=$(./show_quorum_check | grep weight: | sed 's/^.*weight: //' | uniq)

      if [ "$diffs" != "" ]; then
         #
         # --------- Type 1 ----------
         #
         for diff in $diffs; do
            if [ $diff -lt 0 ]; then
               for weight in $weights; do
                  case $weight in  
                  3|6|9|12)
                     type="4"
                     ;;
                  *)
                     type="3"
                     ;;
                  esac
                  break;
               done
            fi
         done
      fi
   fi
   echo ""
   echo -e "       type: ${CError}$type${CNone}"
   echo ""
   exit
fi

FILTER1="coordinator"
FILTER2="these members failed to respond to the view change"

if [ "$last_restarted_timestamp" != "" ]; then
   # Use show_cluster_view output to determine locators and coordinator
   echo ""
   locators=""
   coordinator_addr=""
   for i in $log_files; do
      first_line=$(cat $TMP_FILE1 | grep "$i" | tail -n 1)
      log_file=$(echo $first_line | grep '.log' | sed 's/.log:.*$/.log/')
      timestamp=$(echo $first_line | sed 's/^.*: //')
      first_line=$(echo $first_line | sed -e 's/\//\\\//g' -e 's/\[/\\\[/g')
      cat $TMP_FILE1 | sed -n -e "/$first_line/,/^$/p" > $TMP_FILE2

      count=0
      line_count=0
      weight_sum=0
      weight_sums=""
      while IFS= read -r line; do
         let line_count=line_count+1
         case $line_count in
         1)
           ;;
         2)
            coordinator=$(echo $line | grep $FILTER1 | sed 's/^.*: //')
            if [ "$coordinator" == "" ]; then
               coordinator=$(echo $line |grep "$FILTER2" | sed "s/^.*$FILTER2/Failed members/")
            else
               coordinator_addr=$(echo $coordinator | sed 's/(.*$//')
            fi
            ;;
         *)
            let count=count+1
            weight=$(echo $line | grep weight: | sed 's/^.*weight: //');
            if [ "$weight" == "" ]; then
               addr=$(echo $line | sed 's/^.* //')
               addr=$(echo $addr | sed 's/(.*$//')
               if [ "$(echo $line | grep locator)" != "" ]; then
                  member_type="locator"
                  let weight_sum=weight_sum+3
                  if [[ "$locators" != *"$addr"* ]]; then
                     if [ "$locators" == "" ]; then
                       locators=$addr
                     else
                        locators="$locators $addr"
                     fi
                  fi
               elif [ "$(echo $line | grep lead)" != "" ]; then
                  member_type="lead"
               else
                  member_type="member"
               fi
            else
               weight_sum=$weight
            fi
            ;;
         esac
      done < "$TMP_FILE2"
      unset IFS
      rm $TMP_FILE2
      weight_sums="$weight_sums $weight_sum"
      if [ "$coordinator" != "Failed members" ]; then
         last_weight_sum=$weight_sum
      fi
      echo "  timestamp: $timestamp"
      echo "   log_file: $log_file"
      echo "coordinator: $coordinator"
      echo "     weight: $weight_sum"
      echo ""
   done

   log_file_counts=""
   for i in $log_files; do
      log_file_counts="$log_file_counts $(grep $i $TMP_FILE1 | wc -l)"
   done

   # Determine the weight history
   weights="$(cat $TMP_FILE1 | grep 'weight:' | sed 's/^.*weight: //')"

   # Flatten to string
   weights2=""
   for weight in $weights; do 
     if [ "$weights2" == "" ]; then
         weights2="$weight"
      else
         weights2="$weights2 $weight"
      fi
   done
   weights=$weights2
      
   prev_sum=""
   sum=""
   max_sum=0
   total=0
   for i in $weights; do
      let total=total+1
   done
   last_weights=""
   for log_file_count in $log_file_counts; do
       log_file_weights=""
       max_weight=0
       count=0
       weights3=""
       for weight in $weights2; do
          if [ "$weights3" == "" ]; then
             weights3="$weight"
          else
             weights3="$weights3 $weight"
          fi
          let count=count+1 
          log_file_weights="$log_file_weights $weight"
          if [ $count -lt $log_file_count ]; then
             if [ $max_weight -lt $weight ]; then
                max_weight=$weight
             fi
          else
             if [ "last_weights" == "" ]; then
                last_weights="$weight"
             else
                last_weights="$last_weights $weight"
             fi
             break;
          fi
       done
       weights2=$(echo "$weights2" | sed "s/$weights3//")
   done
   rm $TMP_FILE1

   let diff=last_weight_sum-max_weight
   echo "     weight: $last_weight_sum"
   echo " max weight: $max_weight"
   echo "weight diff: $diff"

   if [ $last_weight_sum -eq $max_weight ]; then
      echo "  diagnosis: Cluster weight sum same as max weight sum [$diff]"
   elif [ $last_weight_sum -lt $max_weight ]; then
      echo "  diagnosis: Cluster weight sum reduced [$diff]"
   else
      echo "  diagnosis: Cluster weight sum increased [$diff]"
   fi

   sb_locators=""
   for i in $all_locators; do
      found="false"
      for j in $locators; do
         if [ "$i" == "$j" ]; then
            found="true"
            break;
         fi
      done
      if [ "$found" != "true" ]; then
         if [ "$sb_locators" == "" ]; then
            sb_locators=$i
         else
            sb_locators="$sb_locators $i"
         fi
      fi
   done

   echo ""
   echo "    all locators: $all_locators"
   echo "missing locators: $sb_locators"
   echo " active locators: $locators"
   echo "     coordinator: $coordinator_addr"
   echo ""
   echo "Testing cluster connnection..."
   echo ""
   successful_locators=""
   failed_locators=""
   for locator in $locators; do
     locator_endpoint=$locator[10334]
     gfsh -e "connect --locator=$locator_endpoint" > $TMP_FILE2
     if [ "$(cat $TMP_FILE2 | grep -i success)" != "" ]; then
        echo "  diagnosis: $locator_endpoint connection successful"
        if [ "$successful_locators" == "" ]; then
           successful_locators="$locator_endpoint"
        else
           successful_locators="$successful_locators $locator_endpoint"
        fi
     else
        if [ "$failed_locators" == "" ]; then
           failed_locators="$locator_endpoint"
        else
           failed_locators="$failed_locators $locator_endpoint"
        fi
        echo "  diagnosis: $locator_endpoint connection failed"
        cat $TMP_FILE2 
     fi
     rm $TMP_FILE2
   done

   if [ "$successful_locators" != "" ]; then
      echo ""
      echo "Checking missing disk stores..."
      echo ""
      line_count=$(./show_stuck_threads | wc -l) 
      if [ $line_count -eq 5 ]; then
         #
         # --------- Type 1 ----------
         #
 
         # no stuck threads
         if [ "$(./show_missing_disk_stores | grep offline)" != "" ]; then
            # missing disk stores found
            echo "  diagnosis: Missing disk stores found"
            if [ "$sb_locators" == "" ]; then
               type="1"
            else
               type="2"
            fi
            echo ""
            echo -e "       type: ${CError}$type${CNone}"
            echo ""
            exit
         else
            # check data loss
            type="1 or normal"
            echo "  diagnosis: Using gfsh check data loss. If data loss then, Type 1; otherwise, normal." 
            echo ""
            echo -e "       type: ${CGo}normal${CNone} or ${CError}1${CNone}"
            echo ""
            exit
         fi
      else
         #
         # --------- Type 5 ----------
         #
 
         type="5"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         exit
      fi
   else
      if [ "$(./show_missing_disk_stores | grep offline)" != "" ]; then
         #
         # --------- Type 2 ----------
         #

         type="2"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         exit
      else
        echo ""
        echo "  diagnosis: Check locator log files for 'quorum check'. If 'quorum check' repeatedly fails then Type 3, otherwise Type 4."
        echo ""
         type="4 or 5"
         echo ""
         echo -e "       type: ${CError}$type${CNone}"
         echo ""
         exit
      fi
   fi


   if [ "$last_view_timestamp" == "" ]; then
      echo -e "${CError}ERROR:${CNone} Unable to find cluster views. Log file contents are incomplete."
      echo "       Please collect additional log files. Command aborted."
      exit 1
   fi
   echo "last_restarted_timestamp: $last_restarted_timestamp"
   echo "     last_view_timestamp: $last_view_timestamp"

fi

echo ""
echo -e "       type: ${CGo}$type${CNone}"
echo ""
